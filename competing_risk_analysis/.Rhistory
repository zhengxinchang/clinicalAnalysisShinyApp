library(clusterProfiler)
#blood.se<-NovershternHematopoieticData()
#pred.scrna <- SingleR(test = scrna.integrated@assays$integrated@data, ref = blood.se, labels = blood.se$label.main)
#pred.scrna.fine <- SingleR(test = scrna.integrated@assays$integrated@data, ref = blood.se, labels = blood.se$label.fine)
#scrna.integrated[["SingleR.labels"]] <- pred.scrna$labels
#scrna.integrated[["SingleR.labels.fine"]] <- pred.scrna.fine$labels
#saveRDS(scrna.integrated,"osteoporosis_normal_scrna_integrated_clusters_singler.rds")
scrna.integrated <- readRDS("./osteoporosis_normal_scrna_integrated_clusters_singler.rds")
### Idents in this dataset is SingleR.label ###
Idents(scrna.integrated)<-"integrated_snn_res.0.35"
VlnPlot(scrna.integrated, features = c("GNLY"))
scrna.integrated.meta %>% select(integrated_snn_res.0.35,SingleR.labels) %>%
group_by(integrated_snn_res.0.35,SingleR.labels) %>%
summarise(count=n()) %>% ungroup() %>%
group_by(integrated_snn_res.0.35) %>%
summarise(pct=count/sum(count)*100,SingleR.labels) %>% ungroup() %>%  ggplot() +
geom_bar(aes(x=SingleR.labels,y=pct,fill=SingleR.labels),stat = "identity") + facet_grid(integrated_snn_res.0.35~.)  + theme_bw() +
theme(axis.text.x=element_text(angle = 60,hjust = 1))
scran.cfu_monocyte <- subset(scrna.integrated,idents="Colony Forming Unit-Monocytes")
# cluster information, cell annotation
scrna.integrated.meta<- scrna.integrated@meta.data
scrna.integrated.meta %>% select(integrated_snn_res.0.35,SingleR.labels) %>%
group_by(integrated_snn_res.0.35,SingleR.labels) %>%
summarise(count=n()) %>% ungroup() %>%
group_by(integrated_snn_res.0.35) %>%
summarise(pct=count/sum(count)*100,SingleR.labels) %>% ungroup() %>%  ggplot() +
geom_bar(aes(x=SingleR.labels,y=pct,fill=SingleR.labels),stat = "identity") + facet_grid(integrated_snn_res.0.35~.)  + theme_bw() +
theme(axis.text.x=element_text(angle = 60,hjust = 1))
ggsave(filename = "osteoporosis_normal.res0.35_label.pdf",device = "pdf",width = 20,height = 15,units = "in")
Idents(scrna.integrated)<-"integrated_snn_res.0.35"
VlnPlot(scrna.integrated, features = c("CCL5"))
VlnPlot(scrna.integrated, features = c("CCL5"),idents = "integrated_snn_res.0.35")
VlnPlot(scrna.integrated, features = c("CCL5"),idents = "integrated_snn_res.0.35",assay = "RNA")
#blood.se<-NovershternHematopoieticData()
#pred.scrna <- SingleR(test = scrna.integrated@assays$integrated@data, ref = blood.se, labels = blood.se$label.main)
#pred.scrna.fine <- SingleR(test = scrna.integrated@assays$integrated@data, ref = blood.se, labels = blood.se$label.fine)
#scrna.integrated[["SingleR.labels"]] <- pred.scrna$labels
#scrna.integrated[["SingleR.labels.fine"]] <- pred.scrna.fine$labels
#saveRDS(scrna.integrated,"osteoporosis_normal_scrna_integrated_clusters_singler.rds")
scrna.integrated <- readRDS("./osteoporosis_normal_scrna_integrated_clusters_singler.rds")
### Idents in this dataset is SingleR.label ###
library(Seurat)
library(SingleR)
library(tidyverse)
library(ReactomePA)
library(org.Hs.eg.db)
library(clusterProfiler)
library(Seurat)
library(SingleR)
library(tidyverse)
library(ReactomePA)
library(org.Hs.eg.db)
library(clusterProfiler)
library(Seurat)
library(SingleR)
library(tidyverse)
library(ReactomePA)
library(org.Hs.eg.db)
library(clusterProfiler)
#blood.se<-NovershternHematopoieticData()
#pred.scrna <- SingleR(test = scrna.integrated@assays$integrated@data, ref = blood.se, labels = blood.se$label.main)
#pred.scrna.fine <- SingleR(test = scrna.integrated@assays$integrated@data, ref = blood.se, labels = blood.se$label.fine)
#scrna.integrated[["SingleR.labels"]] <- pred.scrna$labels
#scrna.integrated[["SingleR.labels.fine"]] <- pred.scrna.fine$labels
#saveRDS(scrna.integrated,"osteoporosis_normal_scrna_integrated_clusters_singler.rds")
scrna.integrated <- readRDS("./osteoporosis_normal_scrna_integrated_clusters_singler.rds")
### Idents in this dataset is SingleR.label ###
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor'))
install.packages("devtools")
install.packages("sf")
devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("Rtools")
BiocManager::install("Rtools")
install.packages("Rtools")
BiocManager::install("Rtools")
?Seurat::FindAllMarkers()
library(shiny)
library(shiny.router)
library(ggplot2)
library(jsonlite)
library(eeptools)
library(dplyr)
library(tableone)
library(readxl)
options(shiny.usecairo = FALSE)
# 直接获得jason格式的临床数据
patient_data <- fromJSON("http://localhost:9196/amltest/dataAnalysis/patientData")
initial_data <- fromJSON("http://localhost:9196/amltest/dataAnalysis/initialData")
period_data <- fromJSON("http://localhost:9196/amltest/dataAnalysis/periodData")
ctcae_data <- fromJSON("http://localhost:9196/amltest/dataAnalysis/ctcaeData")
ctcae_soc_data <- fromJSON("http://localhost:9196/amltest/dataAnalysis/ctcaeSocData")
ctcae_soc_info_data <- fromJSON("http://localhost:9196/amltest/dataAnalysis/ctcaeSocInfoData")
ctcae_soc_info_grade_data <- fromJSON("http://localhost:9196/amltest/dataAnalysis/ctcaeSocInfoGradeData")
patient_data <- readxl::read_excel("../../git_repo/aml_projects/shiny_app/ver202009_1/tables_from_mysql/patient.xlsx")
initial_data <- readxl::read_excel("../../git_repo/aml_projects/shiny_app/ver202009_1/tables_from_mysql/initial.xlsx")
#==================================================
#
# generate unitable data frame
#
#==================================================
base_line_data <-initial_data %>% dplyr::select(patient_id,anc,wbc,plt,hb, mt_ckit,mt_nras,mt_cebp,mt_asxl1,mt_npm1) %>%
rename("CKIT"="mt_ckit","NRAS"="mt_nras","CEBPA"="mt_cebp","ASXL1"="mt_asxl1","NPM1"="mt_npm1") %>%
mutate_at(.vars = vars("patient_id",'anc',"wbc","plt",'hb'),.funs = as.numeric)
unified_data <- patient_data %>% left_join(base_line_data,by = "patient_id")  %>%
mutate_at(.vars = vars("sex"),.funs = as.character) %>% rename("Treatment"="aml_group") %>%
filter(Treatment =="1" | Treatment=="0") %>%
mutate_at(.vars = vars("Treatment"),.funs = function(x){ifelse(x=="1","SDC","LDC")}) %>%
rename("FAB"="aml_classify")
unified_data$Treatment <- as.character(unified_data$Treatment)
unified_data[which(unified_data$Treatment ==0),]$Treatment <-"LDC"
unified_data[which(unified_data$Treatment ==1),]$Treatment <-"SDC"
unified_data
unified_data$Treatment <- as.character(unified_data$Treatment)
unified_data[which(unified_data$Treatment ==0),]$Treatment <-"LDC"
View(unified_data)
runApp('E:/projects/bioinformatics_projects/MyShinyTest/app_1.R')
shiny::runApp('E:/projects/bioinformatics_projects/MyShinyTest')
shiny::runApp('E:/projects/bioinformatics_projects/MyShinyTest')
shiny::runApp('E:/projects/bioinformatics_projects/MyShinyTest')
shiny::runApp('E:/projects/bioinformatics_projects/MyShinyTest')
shiny::runApp('E:/projects/bioinformatics_projects/MyShinyTest')
runApp('E:/projects/bioinformatics_projects/MyShinyTest')
runApp('E:/projects/bioinformatics_projects/MyShinyTest')
runApp('E:/projects/bioinformatics_projects/MyShinyTest')
shiny::runApp('E:/projects/bioinformatics_projects/MyShinyTest')
shiny::runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
?ggpar
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
shiny::runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
runApp('E:/projects/git_repo/aml_database_zhengxc/v1')
library(Seurat)
library(Seurat)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(dplyr)
library(Seurat)
library(dplyr)
library(Seurat)
if ( ! suppressWarnings (require(dplyr))){print("Can not load labrary dplyr...")}
if ( ! suppressWarnings (require(jsonlite))){print("Can not load labrary jsontile...")}
if ( ! suppressWarnings (require(stringr))){print("Can not load labrary stringr...")}
# 辅助函数，用于拼接消息
concatMessage<-function(M,S){
res <- paste(M,S,sep = "\n")
return(res)
}
# 数据类型校验失败，则返回False,如果成功则返回True
validateTypeColumn<-function(df,numcol,colclasses){
# parameters type validataion
# if (! is.)
# validate the type of df ,number of column and type of each column
valid <- TRUE
Message <- ""
if ( ! is.data.frame(df)){valid <- FALSE;Message<- concatMessage(Message,"input is not a data frame...")}
if ( numcol !=  ncol(df)){valid <- FALSE;Message<- concatMessage(Message,"column number error...")}
for ( k in unique(colclasses)){
if (!(k %in% c("numeric","character","factor","logical","integer"))){
Valid <- FALSE
Message<- concatMessage(Message,"ColClasses type is not support...")
break
}
}
#应该构建一个DF的列名称对应类型的向量
for (n in names(colclasses)){
if(class(df[[n]]) != colclasses[[n]]){
valid <-FALSE
Message <- concatMessage(Message,paste0("columns name or type error... name is :",n))
}
}
return(list(Valid=valid,Message=Message))
}
# 对patientdata的校验 调用了validateTypeColumn
validateDataFramePatient<- function(patientdf){
## 这里构建对Patient DF的校验，主要是列名和对应的列的类型。输入一个df，其他参数硬编码进这个函数中
## 合法的列数
dfncol <- 10
## 合法的列名称以及对应的列的数据类型
dfColClass <- c("birthday"="character",
"aml_classify"="integer",
"patient_id"="integer",
"sex"="integer",
"diagnosis_date"="character",
"is_relapse"="logical",
"aml_risk"="integer",
"is_transplant"="logical",
"hospital_id"="integer",
"aml_group"="integer"
)
valid_res <- validateTypeColumn(patientdf,dfncol,dfColClass)
return(valid_res)
}
# 从json获得patient数据，并清洗校验数据
requestAndCleanDataframePatient<- function(){
patientdf <- jsonlite::fromJSON("http://bigd.big.ac.cn/amltest/dataAnalysis/patientData")
valid_res<- validateDataFramePatient(patientdf)
return(list(valid=valid_res$Valid,valid_message=valid_res$Message,data=patientdf))
}
# 辅助函数，用于校验列的合法性，initaldata中使用
convertPosNegFlagOneCell<-function(s){
flag <- "UNDIFINE"
if(is.na(s)){
flag <- "NA"
return(flag)
}
if (stringr::str_detect(string = s,pattern = "-")){
flag<- "negative"
}else if(stringr::str_detect(string = s,pattern = "阴")){
flag<- "negative"
}else if(stringr::str_detect(string = s,pattern = "阴性")){
flag <- "negative"
}else if(stringr::str_detect(string = s,pattern = "^$")){
flag <- "NA"
}else if(stringr::str_detect(string = s,pattern = "^ +$")){
flag <- "NA"
}else if(stringr::str_detect(string = str_to_upper(s),pattern ="^ *NA *$")){
flag <- "NA"
}else if(stringr::str_detect(string = str_to_upper(s),pattern ="^ *NONE *$")){
flag <- "NA"
}else if(stringr::str_detect(string = str_to_upper(s),pattern ="^ *NULL *$")){
flag <- "NA"
}
else {
flag <- "positive"
}
return(flag)
# 返回四种状态，positive negative NA 以及 UNDIFINE ，需要判定是否是UNDIFINE，这种异常状态
}
# 辅助函数，用于校验列的合法性，initaldata中使用
convertCharacter2Number<-function(s){
# 逻辑：
# 去除空格，
# 检测*10^9/L字样，如果有去除
# 检测g/L字样，如果有去除
# 检测%字样，如果有直接返回 numeric -1 （错误代码）
# 检测 - 字样如果有直接返回NA （非字符）
# 检测 "" " " 直接转化为 NA（非字符）
if(is.na(s)){return(NA)}
s2<- str_trim(s,side = "both")
s2<- stringr::str_to_upper(s2)
if(stringr::str_detect(s2,pattern = "%")){
n<- NA
return(n)
}else if (stringr::str_detect(s2,pattern = "^-+$")){
n<- NA
return(n)
}else if(stringr::str_detect(s2,pattern = "^ \\+$")){
n<- NA
return(n)
}else if(stringr::str_detect(s2,pattern = "^$")){
n<- NA
return(n)
}
if(stringr::str_detect(s2,pattern = "[\\*Xx]10\\^9/L")){
s2 <- stringr::str_extract(s2,pattern = "(\\d+\\.*?\\d+)(?=[\\*Xx]10\\^9/L)") # 正向零宽断言，前向。
}else if (stringr::str_detect(s2,pattern = "G/L")){
s2 <- stringr::str_extract(s2,pattern = "(\\d+\\.*?\\d+)(?=G/L)")
}
#print("aa")
tryCatch(expr = {
n <- as.numeric(s2)
},
warning=function(w){
#print("warning")
n <- -1
},
error=function(e){
#print("error")
n <- -1
})
return(n)
}
# 对initialdata的校验 调用了validateTypeColumn
validateDataFrameInitials<- function(initialdf){
## 这里构建对Patient DF的校验，主要是列名和对应的列的类型。输入一个df，其他参数硬编码进这个函数中
## 合法的列数
dfncol <- 23
## 合法的列名称以及对应的列的数据类型
dfColClass <- c(
"mt_runx1"= "character",
"pcr_mll_af10"= "character",
"mt_ckit"= "character",
"mt_nras"= "character",
"mt_cebp"= "character",
"pcr_mll_af9"= "character",
"fish_bcr_abl1"= "character",
"fish_mll"= "character",
"mt_asxl1"= "character",
"fish_cbf_myh11"= "character",
"pcr_mll_af6"= "character",
"fish_aml_eto"= "character",
"pcr_mll_af4"= "character",
"pcr_mll_af1"= "character",
"patient_id"= "integer",
"anc"= "numeric",
"pcr_aml_eto"= "character",
"wbc"= "numeric",
"plt"= "numeric",
"mt_npm1"= "character",
"hb"= "numeric",
"mt_flt31td"= "character",
"pcr_cbf_myh11"= "character"
)
valid_res <- validateTypeColumn(initialdf,dfncol,dfColClass)
return(valid_res)
}
initialdf <- jsonlite::fromJSON("http://bigd.big.ac.cn/amltest/dataAnalysis/initialData")
tryCatch({
# select data
tmp<- initialdf %>% dplyr::select(patient_id,
anc,
wbc,
plt,
hb,
mt_runx1,
mt_ckit,
mt_nras,
mt_cebp,
mt_asxl1,
mt_npm1,
mt_flt31td,
pcr_mll_af10,
pcr_mll_af9,
pcr_mll_af6,
pcr_mll_af4,
pcr_mll_af1,
pcr_aml_eto,
pcr_cbf_myh11,
fish_bcr_abl1,
fish_mll,
fish_cbf_myh11,
fish_aml_eto)
# clean data
# 分为突变数据，pcr数据，fish数据，这三类数据的矫正通过限定空值和阴性值，进而区分阳性值。
# 设定 有字符 "阴“ “阴性“ ”-“的为阴性，”“，NA，以及空为未填，其他为阳性。
for (i in c("mt_runx1",
"mt_ckit",
"mt_nras",
"mt_cebp",
"mt_asxl1",
"mt_npm1",
"mt_flt31td",
"pcr_mll_af10",
"pcr_mll_af9",
"pcr_mll_af6",
"pcr_mll_af4",
"pcr_mll_af1",
"pcr_aml_eto",
"pcr_cbf_myh11",
"fish_bcr_abl1",
"fish_mll",
"fish_cbf_myh11",
"fish_aml_eto"
)){
for (j in seq(1,nrow(tmp))){
#print(j)
tmp[[i]][j] <- convertPosNegFlagOneCell(tmp[[i]][j])
}
}
#对于WBC，hb，anc,plt数据，本应该是numeric类型，但是数据库中设计表所用类型为varchar，因此这里需要转换,这个问题大部分可通过正则匹配的方式修复，但是
#一些数据点的数据项目填错，需要医院方校验，例如将ANC（绝对中性粒细胞计数）错填成中性粒细胞比例。
for(j in c(
"anc",
"wbc",
"plt",
"hb"
)){
print(j)
for (k in seq(1,nrow(tmp))){
print(k)
tmp[[j]][k] <- convertCharacter2Number(tmp[[j]][k])
}
tmp[[j]]<-as.numeric(tmp[[j]])
}
})
s <- tmp[[j]][k]
if(is.na(s)){return(NA)}
s2<- str_trim(s,side = "both")
s2<- stringr::str_to_upper(s2)
if(stringr::str_detect(s2,pattern = "%")){
n<- NA
return(n)
}else if (stringr::str_detect(s2,pattern = "^-+$")){
n<- NA
return(n)
}else if(stringr::str_detect(s2,pattern = "^ \\+$")){
n<- NA
return(n)
}else if(stringr::str_detect(s2,pattern = "^$")){
n<- NA
return(n)
}
if(stringr::str_detect(s2,pattern = "[\\*Xx]10\\^9/L")){
s2 <- stringr::str_extract(s2,pattern = "(\\d+\\.*?\\d+)(?=[\\*Xx]10\\^9/L)") # 正向零宽断言，前向。
}else if (stringr::str_detect(s2,pattern = "G/L")){
s2 <- stringr::str_extract(s2,pattern = "(\\d+\\.*?\\d+)(?=G/L)")
}
#print("aa")
tryCatch(expr = {
n <- as.numeric(s2)
},
warning=function(w){
#print("warning")
n <- -1
},
error=function(e){
#print("error")
n <- -1
})
return(n)
n
n)
n
source("./data_prepar.r",encoding = "utf-8")
a<- data_prepare()
setwd("E:/projects/git_repo/aml_database_analysis_shinyapp/competing_risk_analysis")
library(cmprisk)
install.packages("cmprsk")
library(cmprisk)
library(cmprisk)
BiocManager::install("cmprsk")
library(cmprisk)
BiocManager::install("cmprsk")
library(cmprsk)
library(cmprsk)
library(survival)
library(cmprsk)
bmt <- read.csv("http://www.stat.unipg.it/luca/R/bmt.csv",sep=";")
bmt <- read.csv("./bmt.csv",sep=";")
View(bmt)
bmt$dis <- factor(bmt$dis , levels = c(0,1),labels = c("ALL","AML"))
bmt$dis <- factor(bmt$dis , levels = c(0,1),labels = c("ALL","AML"))
bmt$status <- factor(bmt$status ,levels = c(0,1,2),labels = c("Censored","Motality","Relapse"))
summary(bmt)
bmt <- read.csv("./bmt.csv",sep=";")
bmt$dis <- factor(bmt$dis , levels = c(0,1),labels = c("ALL","AML"))
bmt$status <- factor(bmt$status ,levels = c(0,1,2),labels = c("Censored","Motality","Relapse"))
summary(bmt)
xtabs(data = bmt, ~ dis + status)
addmargins(xtabs(data = bmt, ~ dis + status))
addmargins(xtabs(data = bmt, ~ dis + status))
addmargins(xtabs(data = bmt, ~ dis + status))
resEfsByDis <- survfit(
formula = Surv(ftime,status!="Censored") ~dis,
data = bmt,
type = "kaplan-meier",
error = "greenwood",
conf.type= "log-log"
)
Surv(ftime,status!="Censored")
Surv(ftime,status!="Censored",origin = bmt)
Surv(ftime,status!="Censored")~disk
Surv(ftime,status!="Censored")~dis
summary(resEfsByDis)
summary(resEfsByDis
)
rms::survplot(resEfsByDis)
library(survminer)
library(survminer)
library(survminer)
rm(list = ls())
library(survminer)
